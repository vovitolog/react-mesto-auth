{"ast":null,"code":"class Api {\n  constructor(_ref) {\n    let {\n      baseUrl,\n      headers\n    } = _ref;\n    this._baseUrl = baseUrl;\n    this._headers = headers;\n  }\n\n  _checkPromise(res) {\n    if (res.ok) {\n      return res.json();\n    }\n\n    return Promise.reject(`Ошибка: ${res.status}`);\n  }\n\n  getInitialCards() {\n    return fetch(`${this._baseUrl}/cards`, {\n      headers: this._headers\n    }).then(res => this._checkPromise(res));\n  }\n\n  getUserInfo() {\n    return fetch(`${this._baseUrl}/users/me`, {\n      headers: this._headers\n    }).then(res => this._checkPromise(res));\n  }\n\n  renderFirstScreen() {\n    return Promise.all([this.getInitialCards(), this.getUserInfo()]);\n  }\n\n  setNewUserInfo(data) {\n    return fetch(`${this._baseUrl}/users/me`, {\n      method: \"PATCH\",\n      headers: this._headers,\n      body: JSON.stringify({\n        name: data.name,\n        about: data.profession\n      })\n    }).then(res => this._checkPromise(res));\n  }\n\n  setNewProfilePhoto(newPhotoUrl) {\n    return fetch(`${this._baseUrl}/users/me/avatar`, {\n      method: \"PATCH\",\n      headers: this._headers,\n      body: JSON.stringify({\n        avatar: newPhotoUrl\n      })\n    }).then(res => this._checkPromise(res));\n  }\n\n  addNewCard(name, link) {\n    return fetch(`${this._baseUrl}/cards`, {\n      method: \"POST\",\n      headers: this._headers,\n      body: JSON.stringify({\n        name,\n        link\n      })\n    }).then(res => this._checkPromise(res));\n  }\n\n  deleteCard(cardId) {\n    return fetch(`${this._baseUrl}/cards/${cardId}`, {\n      method: \"DELETE\",\n      headers: this._headers\n    }).then(res => this._checkPromise(res));\n  }\n\n  addLike(cardId) {\n    return fetch(`${this._baseUrl}/cards/${cardId}/likes`, {\n      method: \"PUT\",\n      headers: this._headers\n    }).then(res => this._checkPromise(res));\n  }\n\n  removeLike(cardId) {\n    return fetch(`${this._baseUrl}/cards/${cardId}/likes`, {\n      method: \"DELETE\",\n      headers: this._headers\n    }).then(res => this._checkPromise(res));\n  }\n\n  changeLikeCardStatus(cardId, isLiked) {\n    return !isLiked ? this.removeLike(cardId) : this.addLike(cardId);\n  }\n\n}\n\nconst api = new Api({\n  baseUrl: \"https://mesto.nomoreparties.co/v1/cohort-40\",\n  headers: {\n    authorization: \" f67242ed-0af1-4508-b1a9-28f5e424436c\",\n    \"Content-Type\": \"application/json\"\n  }\n});\nexport default api;","map":{"version":3,"names":["Api","constructor","baseUrl","headers","_baseUrl","_headers","_checkPromise","res","ok","json","Promise","reject","status","getInitialCards","fetch","then","getUserInfo","renderFirstScreen","all","setNewUserInfo","data","method","body","JSON","stringify","name","about","profession","setNewProfilePhoto","newPhotoUrl","avatar","addNewCard","link","deleteCard","cardId","addLike","removeLike","changeLikeCardStatus","isLiked","api","authorization"],"sources":["/media/vovitolog/Data/Projects/react-mesto-auth/src/utils/Api.js"],"sourcesContent":["class Api {\n  constructor({ baseUrl, headers }) {\n    this._baseUrl = baseUrl;\n    this._headers = headers;\n  }\n\n  _checkPromise(res) {\n    if (res.ok) {\n      return res.json();\n    }\n    return Promise.reject(`Ошибка: ${res.status}`);\n  }\n\n  getInitialCards() {\n    return fetch(`${this._baseUrl}/cards`, {\n      headers: this._headers,\n    }).then((res) => this._checkPromise(res));\n  }\n\n  getUserInfo() {\n    return fetch(`${this._baseUrl}/users/me`, {\n      headers: this._headers,\n    }).then((res) => this._checkPromise(res));\n  }\n\n  renderFirstScreen() {\n    return Promise.all([this.getInitialCards(), this.getUserInfo()]);\n  }\n\n  setNewUserInfo(data) {\n    return fetch(`${this._baseUrl}/users/me`, {\n      method: \"PATCH\",\n      headers: this._headers,\n      body: JSON.stringify({\n        name: data.name,\n        about: data.profession,\n      }),\n    }).then((res) => this._checkPromise(res));\n  }\n\n  setNewProfilePhoto(newPhotoUrl) {\n    return fetch(`${this._baseUrl}/users/me/avatar`, {\n      method: \"PATCH\",\n      headers: this._headers,\n      body: JSON.stringify({\n        avatar: newPhotoUrl,\n      }),\n    }).then((res) => this._checkPromise(res));\n  }\n\n  addNewCard(name, link) {\n    return fetch(`${this._baseUrl}/cards`, {\n      method: \"POST\",\n      headers: this._headers,\n      body: JSON.stringify({\n        name,\n        link,\n      }),\n    }).then((res) => this._checkPromise(res));\n  }\n\n  deleteCard(cardId) {\n    return fetch(`${this._baseUrl}/cards/${cardId}`, {\n      method: \"DELETE\",\n      headers: this._headers,\n    }).then((res) => this._checkPromise(res));\n  }\n\n  addLike(cardId) {\n    return fetch(`${this._baseUrl}/cards/${cardId}/likes`, {\n      method: \"PUT\",\n      headers: this._headers,\n    }).then((res) => this._checkPromise(res));\n  }\n  removeLike(cardId) {\n    return fetch(`${this._baseUrl}/cards/${cardId}/likes`, {\n      method: \"DELETE\",\n      headers: this._headers,\n    }).then((res) => this._checkPromise(res));\n  }\n\n  changeLikeCardStatus(cardId, isLiked) {\n    return !isLiked ? this.removeLike(cardId) : this.addLike(cardId);\n  }\n}\n\nconst api = new Api({\n  baseUrl: \"https://mesto.nomoreparties.co/v1/cohort-40\",\n  headers: {\n    authorization: \" f67242ed-0af1-4508-b1a9-28f5e424436c\",\n    \"Content-Type\": \"application/json\",\n  },\n});\n\nexport default api;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}